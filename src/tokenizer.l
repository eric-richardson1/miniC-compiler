/* Author: Eric Richardson
 * Dartmouth CS57, Spring 2023
 * tokenizer.l - tokenizes the input "mini_c" program according to a
 * series of regular expressions specified in the 'RULES' section. Depends
 * on "y.tab.h", which is generated by "parser.y".
 */

/******************** DEFINITIONS ********************/
%{
    #include <stdio.h>
    #include "y.tab.h"
%}
letter      [a-zA-Z]
digit       [0-9]

/******************** RULES ********************/
/* Note: When an expression is matched, it is currently being printed to stdout. 
 * In effect, a correctly tokenized, parsed input file will be printed unaltered.
 * If syntax errors are detected, then the file will be printed unaltered up to
 * the point at which the error was encountered.  
 */
%%
"if"        {
    printf("%s", yytext);
    return IF;
            }

"else"      {
    printf("%s", yytext);
    return ELSE;
}

"while"     {
    printf("%s", yytext);
    return WHILE;
}

"int"       {
    printf("%s", yytext);
    return INT;
}

"void"      {
    printf("%s", yytext);
    return VOID;
}

"extern"    {
    printf("%s", yytext);
    return EXTERN;
}

"return"    {
    printf("%s", yytext);
    return RETURN;
}

"print"     {
    printf("%s", yytext);
    return PRINT;
}

"read"      { 
    printf("%s", yytext);
    return READ;
}

"=="        {
    printf("%s", yytext);
    return EQ;}
">="        {
    printf("%s", yytext);
    return GEQ;
}
"<="        {
    printf("%s", yytext);
    return LEQ;
}

[-+*/(){}<>=;] {
    printf("%s", yytext);
    return yytext[0];
}

{letter}({letter}|{digit}|_)* {
    printf("%s", yytext);
    return IDENTIFIER;
    
}

{digit}+ {
    printf("%s", yytext);
    return NUM;
    
}

.|[ \t\n] {
    printf("%s", yytext);
}
%%

/******************** SUBROUTINES ********************/
int yywrap() {
    return 1;
}
